#!/usr/bin/env python3

# standard stuff
import argparse, requests, sys, json, termcolor

version = "1.0.0"
default_template = "seed-crawl.tmpl"
template_replace_txt = "###SEEDURL###"

# dealing with the input/output of the program
parser = argparse.ArgumentParser(prog="tkrnctl", add_help=False,
    description="tkrn's archive control tool - " + version,
    epilog="For more information please goto: https://github.com/tkrn/tkrnctl")
parser.add_argument("-v", help="increase output verbosity", action="store_true", dest="verbose")
parser.add_argument("-c", help="create single Browsertrix Cloud workflow", action="store", dest="fqdn")
parser.add_argument("-b", help="create bulk Browsertrix Cloud workflows from file", action="store", 
    nargs="?", type=argparse.FileType("r"), default=sys.stdin, dest="bulkfilename")
parser.add_argument("-s", help="status of crawls for Browsertrix Cloud", action="store_true", dest="status")
parser.add_argument("-u", help="username for Browsertrix Cloud", action="store", dest="username")
parser.add_argument("-p", help="password for Browsertrix Cloud", action="store", dest="password")
parser.add_argument("-h", help="host for Browsertrix Cloud", action="store", dest="host", default="localhost")
parser.add_argument("-o", help="org ID for within Browsertrix Cloud", action="store", dest="orgid")
parser.add_argument("-t", help="Browsertrix Cloud workflow JSON template to post", action="store",
    nargs="?", type=argparse.FileType("r"), default=sys.stdin, dest="tmplfilename")
parser.add_argument("-e", help="tkrnctl environmental file for stored secrets", action="store",
    nargs="?", type=argparse.FileType("r"), default=sys.stdin, dest="envfilename")
args = parser.parse_args()

# internal mode handling
mode = "none"
if args.status:
    mode = "status"
elif args.fqdn:
    mode = "create"
elif args.bulkfilename:
    if args.bulkfilename.name != "<stdin>":
        mode = "bulkcreate"

# lets define those functions
def evaluate_env():
    print("evaluate_env")
def print_tmp_dir():
    print("print_tmp_dir")
def create_tmp_dir():
    print("create_tmp_dir")
def btrix_authenticate():
    print("btrix_authenticate")
def brix_workflow_post():
    print("brix_workflow_post")
def btrix_worklow_get():
    print("btrix_worklow_get")

# once the workflow is determined, lets do the work
match mode:
    case "create":
        print("create")
    case "bulkcreate":
        print("bulkcreate")
    case "status":
        print("status")
    case _:
        parser.print_help()
