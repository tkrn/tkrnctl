#!/usr/bin/env python3

# standard stuff
import argparse, requests, sys, json, termcolor, os
from dotenv import load_dotenv
version = "1.0.0"

# defaults
json_header =  {"Content-Type":"application/json"}
login_header = {"Content-Type":"application/x-www-form-urlencoded"}
btrix_default_protocol = "http"
btrix_default_hostname = "localhost"
btrix_default_port = "30870"

# runtime variables
access_token = None
btrix_protocol = None
btrix_hostname = None
btrix_port = None
btrix_username = None
btrix_password = None

# dealing with the input/output of the program
parser = argparse.ArgumentParser(prog="tkrnctl", add_help=False,
    description="tkrn's archive control tool - " + version,
    epilog="For more information please goto: https://github.com/tkrn/tkrnctl")
parser.add_argument("-v", help="increase output verbosity", action="store_true", dest="verbose")
parser.add_argument("-c", help="create single Browsertrix Cloud workflow", action="store", dest="fqdn")
parser.add_argument("-b", help="create bulk Browsertrix Cloud workflows from file", action="store", 
    nargs="?", type=argparse.FileType("r"), default=sys.stdin, dest="bulkfilename")
parser.add_argument("-s", help="status of crawls for Browsertrix Cloud", action="store_true", dest="status")
parser.add_argument("-u", help="username for Browsertrix Cloud", action="store", dest="username")
parser.add_argument("-p", help="password for Browsertrix Cloud", action="store", dest="password")
parser.add_argument("-h", help="host for Browsertrix Cloud", action="store", dest="host", default="localhost")
parser.add_argument("-o", help="org ID for within Browsertrix Cloud", action="store", dest="orgid")
parser.add_argument("-t", help="Browsertrix Cloud workflow JSON template to post", action="store",
    nargs="?", type=argparse.FileType("r"), default=sys.stdin, dest="tmplfilename")
parser.add_argument("-e", help="tkrnctl environmental file for stored secrets", action="store",
    nargs="?", type=argparse.FileType("r"), default=sys.stdin, dest="envfilename")
args = parser.parse_args()

# internal mode handling
mode = "none"
if args.status:
    mode = "status"
elif args.fqdn:
    mode = "create"
elif args.bulkfilename:
    if args.bulkfilename.name != "<stdin>":
        mode = "bulkcreate"

# lets define those functions
def evaluate_environment():
    print("evaluate_environment")
    env = "./.env"
    if os.path.isfile(env) and os.access(env, os.R_OK):
        load_dotenv()

        if os.getenv('btrix_username') != None:
            global btrix_username
            btrix_username = os.getenv('btrix_username')
            print (btrix_username)

        if os.getenv('btrix_password') != None:
            global btrix_password
            btrix_password = os.getenv('btrix_password')

        global btrix_protocol
        if os.getenv('btrix_protocol') != None:
            btrix_protocol = os.getenv('btrix_protocol')
        else:
            btrix_protocol = btrix_default_protocol

        global btrix_hostname
        if os.getenv('btrix_hostname') != None:
            btrix_hostname = os.getenv('btrix_hostname')
        else:
            btrix_hostname = btrix_default_hostname

        global btrix_port
        if os.getenv('btrix_port') != None:
            btrix_port = os.getenv('btrix_port')
        else:
            btrix_port = btrix_default_port  
    else:
        print("Either the file is missing or not readable")

    
def print_tmp_dir():
    print("print_tmp_dir")
def create_tmp_dir():
    print("create_tmp_dir")
def btrix_authenticate():
    btrix_login_url = "{}://{}:{}/api/auth/jwt/login".format(btrix_protocol, btrix_hostname, btrix_port)
    login_json = {'username': btrix_username, 'password': btrix_password}
    print (btrix_login_url)
    print (login_json)
    response = requests.post(btrix_login_url, data=login_json, headers=login_header)
    print (response.status_code)
    if response.status_code == 200:
        if response.json()["access_token"]:
            global access_token
            access_token = response.json()["access_token"]
def brix_workflow_post():   
    print("brix_workflow_post")
def btrix_worklow_get():
    print("btrix_worklow_get")

# once the workflow is determined, lets do the work
match mode:
    case "create":
        evaluate_environment()
        btrix_authenticate()
    case "bulkcreate":
        print("bulkcreate")
    case "status":
        print("status")
    case _:
        parser.print_help()
