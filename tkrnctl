#!/usr/bin/env python3

# standard stuff
import argparse, requests, sys, json, os, tempfile, random, string, shutil, uuid, pathlib
from termcolor import colored, cprint
from dotenv import load_dotenv
from functools import reduce

version = '1.0.0'

# defaults
json_header =  {'Content-Type':'application/json'}
login_header = {'Content-Type':'application/x-www-form-urlencoded'}
btrix_default_protocol = 'http'
btrix_default_hostname = 'localhost'
btrix_default_port = '30870'
template_default_replace_txt = '###SEEDURL###'
template_default_file = 'seed-crawl.tmpl'

# runtime variables
access_token, tmp_dir = None, None
btrix_protocol, btrix_hostname, btrix_port = None, None, None
btrix_username, btrix_password, btrix_org_uuid = None, None, None
template_replace_txt, template_file, override_duplicates = None, None, None
json_workflow_data = None
current_workflows = list()

# dealing with the input/output of the program
parser = argparse.ArgumentParser(prog="tkrnctl", add_help=False,
    description="tkrn's archive control tool - " + version,
    epilog="For more information please goto: https://github.com/tkrn/tkrnctl")
parser.add_argument("-v", help="increase output verbosity", action="store_true", dest="verbose")
parser.add_argument("-c", help="create single Browsertrix Cloud workflow", action="store", dest="in_fqdn")
parser.add_argument("-b", help="create bulk Browsertrix Cloud workflows from file", action="store", 
    nargs="?", type=argparse.FileType("r"), default=sys.stdin, dest="in_bulk_filename")
parser.add_argument("-i", help="override duplicate workflow match", action="store_true", dest="override_duplicates")
parser.add_argument("-l", help="list status of crawls for Browsertrix Cloud", action="store_true", dest="in_status")
parser.add_argument("-u", help="username for Browsertrix Cloud", action="store", dest="in_username")
parser.add_argument("-p", help="password for Browsertrix Cloud", action="store", dest="in_password")
parser.add_argument("-h", help="hostname for Browsertrix Cloud", action="store", dest="in_hostname")
parser.add_argument("-o", help="org UUID within Browsertrix Cloud", action="store", dest="in_org_uuid")
parser.add_argument("-t", help="Browsertrix Cloud workflow JSON template to post", action="store",
    nargs="?", type=argparse.FileType("r"), default=sys.stdin, dest="in_template_file")
parser.add_argument("-e", help="tkrnctl environmental file for stored secrets", action="store",
    nargs="?", type=argparse.FileType("r"), default=sys.stdin, dest="in_envfilename")
args = parser.parse_args()

# handle verbose mode
if args.verbose:
    verbose = True
else:
    verbose = False
    
if args.override_duplicates:
    override_duplicates = True
else:
    override_duplicates = False

# internal mode handling
mode = 'none'
if args.in_status:
    mode = 'status'
elif args.in_fqdn:
    mode = 'create'
elif args.in_bulk_filename:
    if args.in_bulk_filename.name != '<stdin>':
        mode = 'bulkcreate'

# lets define those functions
def evaluate_environment():
    env = './.env'
    if os.path.isfile(env) and os.access(env, os.R_OK):
        load_dotenv()
       
        global btrix_username
        if args.in_username == None:
            if os.getenv('btrix_username') != None:
                
                btrix_username = os.getenv('btrix_username')
        else:
            btrix_username = args.in_username

        global btrix_password
        if args.in_password == None:
            if os.getenv('btrix_password') != None:
                
                btrix_password = os.getenv('btrix_password')
        else:
            btrix_password = args.in_password

        global btrix_protocol
        if os.getenv('btrix_protocol') != None:
            btrix_protocol = os.getenv('btrix_protocol')
        else:
            btrix_protocol = btrix_default_protocol

        global btrix_hostname
        if args.in_hostname == None:
            if os.getenv('btrix_hostname') != None:
                btrix_hostname = os.getenv('btrix_hostname')
            else:
                btrix_hostname = btrix_default_hostname
        else:
            btrix_hostname = args.in_hostname

        global btrix_port
        if os.getenv('btrix_port') != None:
            btrix_port = os.getenv('btrix_port')
        else:
            btrix_port = btrix_default_port

        global btrix_org_uuid
        if args.in_org_uuid == None:
            if os.getenv('btrix_org_uuid') != None:
                btrix_org_uuid = os.getenv('btrix_org_uuid')
        else:
            btrix_org_uuid = args.in_org_uuid

        global template_replace_txt
        if os.getenv('template_replace_txt') != None:
            template_replace_txt = os.getenv('template_replace_txt')
        else:
            template_replace_txt = template_default_replace_txt 

        global template_file
        if args.in_template_file.name == '<stdin>':
            if os.getenv('template_default_file') != None:
                template_file = os.getenv('template_default_file')
            else:
                template_file = template_default_file
        else:
            template_file = args.in_template_file.name
            
    else:
        print('Either the file is missing or not readable')

def write_post_json_file(destination, source, search, replace):
    with open(source, 'r') as file:
        data = file.read()
        data = data.replace(search, replace)
    with open(destination, 'w') as file:
        file.write(data)

def random_json_filename():
    return str(uuid.uuid4()).split('-')[0] + '.json'

def create_tmp_dir():
    global tmp_dir
    tmp_dir = str(tempfile.mkdtemp(prefix='tkrnctl_'))
    
def random_tmp_json_filepath():
    if tmp_dir == None:
        create_tmp_dir()
    json_file = random_json_filename()
    full_path = pathlib.Path(tmp_dir) / json_file
    return full_path

def clean_url(uri):
    processed_uri = None
    try:
        processed_uri = uri.split('/')[2]
    except:
        processed_uri = uri
    processed_uri = processed_uri.lower().rstrip()
    return processed_uri

def btrix_authenticate():
    btrix_login_url = "{}://{}:{}/api/auth/jwt/login".format(btrix_protocol, btrix_hostname, btrix_port)
    login_json = {'username': btrix_username, 'password': btrix_password}
    response = requests.post(btrix_login_url, data=login_json, headers=login_header)
    if response.status_code == 200:
        if response.json()['access_token']:
            global access_token
            access_token = response.json()['access_token']

def brix_workflow_post(json_file):   
    btrix_post_url = "{}://{}:{}/api/orgs/{}/crawlconfigs/".format(btrix_protocol, btrix_hostname, btrix_port, btrix_org_uuid)
    post_header = {'Content-Type': 'application/json', 'Authorization': "Bearer {}".format(access_token)}
    with open(api_post_file, 'r') as file:
        response = requests.post(btrix_post_url, data=file.read(), headers=post_header)
        return response.status_code

def btrix_worklow_get():
    btrix_get_url = "{}://{}:{}/api/orgs/{}/all-crawls".format(btrix_protocol, btrix_hostname, btrix_port, btrix_org_uuid)
    post_header = {'Content-Type': 'application/json', 'Authorization': "Bearer {}".format(access_token)}
    response = requests.get(btrix_get_url, headers=post_header)
    return response.text

def btrix_check_existing_workflow(in_name):
    match = False
    in_name = in_name.lower().rstrip()
    #"{}://{}:{}/api/orgs/{}/crawls?name={}"
    #"{}://{}:{}/api/orgs/{}/crawlconfigs?firstSeed={}"
    #"{}://{}:{}/api/orgs/{}/crawlconfigs?name={}"
    btrix_get_url = "{}://{}:{}/api/orgs/{}/crawlconfigs?name={}".format(btrix_protocol, btrix_hostname, btrix_port, btrix_org_uuid, in_name)
    post_header = {'Content-Type': 'application/json', 'Authorization': "Bearer {}".format(access_token)}
    response = requests.get(btrix_get_url, headers=post_header)
    if response.status_code == 200:
        data = json.loads(response.text)
        if (len(data['items']) > 0):
            match = True
            #print(response.text)
            #print(len(data['items']))  
    return match

def btrix_load_existing_workflows():
    json_workflow_data = json.loads(btrix_worklow_get())
    for key in json_workflow_data['items']:
        if key['name']:
            current_workflows.append(key['name'].lower().rstrip())

def obscure_password(password):
    hpw = password[:3]
    for c in range(len(password)-6):
        hpw = hpw + '.'
    hpw = hpw + password[-3:]
    return hpw

def print_header():
    cprint("\ntkrnctl's archive control tool - version {}\n".format(version), 'magenta', attrs=['bold'])
    cprint('Current Variables:', 'green')
    cprint("  Browstrix URI        : {}://{}:{}".format(btrix_protocol, btrix_hostname, btrix_port), 'white')
    cprint("  Browstrix Username   : {}".format(btrix_username), 'white')
    cprint("  Browstrix Password   : {}".format(obscure_password(btrix_password)), 'white')
    cprint("  Browstrix Org UUID   : {}".format(btrix_org_uuid), 'white')
    cprint("  Template File        : {}".format(template_file), 'white')
    cprint("  Template Replace Str : {}\n".format(template_replace_txt), 'white')

# once the workflow is determined, lets do the work
match mode:
    case "create":
        evaluate_environment()
        print_header()
        btrix_authenticate()      
        if access_token != None:
            btrix_load_existing_workflows()
            cleaned_url = clean_url(args.in_fqdn)
            verbose and cprint("Cleaned URL: {}".format(cleaned_url), 'grey')
            if (not (btrix_check_existing_workflow(cleaned_url))):
                api_post_file = random_tmp_json_filepath()
                verbose and cprint("API JSON Filepath: {}".format(api_post_file), 'grey')
                if api_post_file != None:    
                    write_post_json_file(api_post_file,template_file,template_replace_txt,cleaned_url)
                    response = brix_workflow_post(api_post_file)
                    if response == 200:
                        cprint("Success creating workflow: {}".format(cleaned_url), 'green')
                    else:
                        cprint("Failed creating workflow: {}".format(cleaned_url), 'red')
            else:
                cprint("Found existing workflow (not creating): {}".format(cleaned_url), 'red')
    case "bulkcreate":
        evaluate_environment()
        print_header()
        try:
            with open(args.in_bulk_filename.name, 'r') as fp:
                btrix_authenticate()               
                if access_token != None:
                    btrix_load_existing_workflows()
                    for line in fp:
                        cleaned_url = clean_url(line)
                        verbose and cprint("Cleaned URL: {}".format(cleaned_url), 'grey')
                        if (not (btrix_check_existing_workflow(cleaned_url))):
                            api_post_file = random_tmp_json_filepath()
                            verbose and cprint("API JSON Filepath: {}".format(api_post_file), 'grey')
                            if api_post_file != None:    
                                write_post_json_file(api_post_file,template_file,template_replace_txt,cleaned_url)
                                response = brix_workflow_post(api_post_file)
                                if response == 200:
                                    cprint("Success creating workflow: {}".format(cleaned_url), 'green')
                                else:
                                    cprint("Failed creating workflow: {}".format(cleaned_url), 'red')
                        else:
                            cprint("Found existing workflow (not creating): {}".format(cleaned_url), 'red')
        except FileNotFoundError:
            cprint("Failed opening file: {}".format(args.in_bulk_filename.name), 'red')
    case "status":
        evaluate_environment()
        print_header()
        btrix_authenticate()
        
        #if access_token != None:    
            #btrix_load_existing_workflows()
            #parsed = json.loads(btrix_worklow_get())  
            #print(json.dumps(parsed, indent=2))
    case _:
        parser.print_help()